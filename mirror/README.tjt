This began (as the git repo version) as the mirror package from the machine dorado.
The tarball on dorado was created there on 1-3-2018 and work on a linux version
was done on cholla (and trona) on and off for over a year after that before it
was deemed wise to put this under Git.  At that point, I started by commiting
the original dorado sources, then overlaid the work I had done up to that point
which would in theory allow someone to get some idea of the changes made.

======================================================================================================
======================================================================================================
== The following are instructions given to me by skip to get this running
== on linux
======================================================================================================
======================================================================================================

You will need the symbolic link /iraf to where you put the iraf top directory, which should contain:
cache/
imdirs/
iraf/

Then make a directory for the external "mirror" package, and cd to it.
mkdir /iraf/iraf/extern/mirror
cd /iraf/iraf/extern/mirror/

Unpack your mirror.tar.gz here.
Double check that /iraf/iraf/extern/mirror/mirror.cl exists.
That should confirm that you have the link correct and the software unpacked in the right place.

Now setup your login environment for IRAF development.  I use tcsh so in my ~/.cshrc I have:
setenv iraf /iraf/iraf/
setenv IRAFARCH linux
source /iraf/iraf/unix/hlib/irafuser.csh
setenv mirror /iraf/iraf/extern/mirror/

(Note that IRAFARCH would be linux64 to build 64bit binaries which you DON'T want to do.)
This should go into your *login* environment to make sure everything gets propagated correctly.

Now fix a problem in IRAF which I don't understand.
This should not be necessary, but apparently it is.
cd /iraf/iraf/unix/
mkdir bin.generic
cp bin.linux/f2c.h bin.generic/
A kludge, but not worth debugging for this project.

Do NOT use bash.  If you wanted to try using bash,
you would need to make equivalent settings, but be aware that using
bash DOES NOT WORK and this will be a huge waste of time.
 (( If you did use bash, you would do the equivalent.
    There is a /iraf/iraf/unix/hlib/irafuser.sh ))

So now logout and log back in again, and double check the environment.
(Note that the trailing slash in directory names is important to IRAF.)

The IRAF mkpkg system has multi-architecture support, so we must now set up for it.
cd /iraf/iraf/extern/mirror/
mkdir bin.linux

Append this to the mkpkg file:
linux:
        $verbose off
        $set DIRS = "lib src"
        !$(hlib)/mkfloat.csh linux -d $(DIRS)
        ;

Now setup for your build architecture:
mkpkg -p mirror linux
(Note that you should always invoke mkpkg with the -p mirror switch.)

This will gather up any binaries in current architecture and save them in the appropriate bin.* directory,
change the bin/ symbolic link to the new architecture, and restore any previously saved binaries from the
new bin.* directory.  There won't be any at this time, so you will get a message.
Do not change the bin/ symlink by hand!
Whoever last worked on the code screwed this up.
So you will probably find binaries in bin.generic/ at this time.
Delete them. bin.generic/ should always be empty.
The idea is to build each architecture one at a time, and then set the build architecture
to generic for distribution.
For purposes of this project, you can just leave the build architecture set to linux.

Now we fix a portability bug in /iraf/iraf/extern/mirror/src/oven/hgkey.x
77c77
<       if (iand(sw , 1) != 0) {
---
>       if ((sw & 1) != 0) {
83c83
<       if (iand(sw , 2) != 0) {
---
>       if ((sw & 2) != 0) {

Now edit /iraf/iraf/extern/mirror/src/mkpkg and remove -lposix4 so that the line reads:
$set    LIBS = "-lxtools -lc"
This library is not needed and doesn't exist under linux.

By default, only user "pilot" or "pilot2" can write to shared memory.
You'll want to change that in /iraf/iraf/extern/mirror/src/oven/init.c at the bottom.
#define TEST and change the user name to "tom", not "skip".
Don't forget to remove the #define before deployment.

Now you're ready to build the software.
cd /iraf/iraf/extern/mirror/
mkpkg -p mirror >& spool
mkpkg -p mirror summary
(The summary target looks in file "spool", and produces a non-verbose version of the build output.)
If you're successful, you will have built /iraf/iraf/extern/mirror/bin.linux/x_mirror.e

I think I remembered everything.

======================================================================================================
======================================================================================================
== End of skips instructions to get this running on linux
======================================================================================================
======================================================================================================

Files changed and added after the above:

bin.linux
mkpkg
src/mkpkg
src/oven/hgkey.x
src/oven/init.c

*** NOTE that the fix above involving f2c.h is a fix to IRAF itself, not the mirror package.  ***

After this I made some changes to shmalloc.c to give better error messages.

======================================================================================================

What I am doing, now that this is under git, is to keep this off to the side (not in the
iraf directory tree).  Building "off to the side" seems to work just fine.
Then I commit afte a successful build and I can use git clone to distribute the
package to /iraf/iraf/extern/mirror on any and all machines that need it.

As discussed elsewhere, I set up a special user "irafdude" with a tcsh login shell and the
environment settings discussed above, just to build this package.  As myself (user "tom")
I want nothing to do with the csh or special environment settings.  Your mileage may differ.

There are some ownership issues doing this.  I chown -R to "irafdude" to build, then chown -R
back to "tom" to commit to git.  Mildly awkward, but gets things done.
It doesn't much matter who owns the files in /iraf/iraf/extern as long as you don't intend
to build.

So, to deploy this:

cd /iraf/iraf/extern
git clone https://github.com/trebisky/Oven.git
ln -s Oven/mirror mirror

You get some bonus items in Oven/utils

======================================================================================================

The add the endian fixing byte swapping, the following files get messed with

src/oven/database.c -- gets modified
src/oven/fix_oven.c -- is entirely new
src/oven/mkpkg -- gets a line for fix_oven.c

The new code in database.c is under the LINUX_ENDIAN conditional.

======================================================================================================
THE END
======================================================================================================
